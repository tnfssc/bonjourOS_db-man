// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Config

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// End Config

// NextAuth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Manager       Manager[]
  Customer      Customer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// End NextAuth

// SWE

model Manager {
  id    String  @id
  user  User    @relation(fields: [id], references: [id], onDelete: Cascade)
  phone String?
}

model Customer {
  id           String        @id
  user         User          @relation(fields: [id], references: [id], onDelete: Cascade)
  firstName    String
  lastName     String?
  phone        String
  address      String?
  city         String?
  state        String?
  zip_code     String?
  country      String?
  reservations Reservation[]
  valid        Boolean       @default(true)
}

model Room {
  id           Int           @id @default(autoincrement())
  number       String        @unique
  suite        RoomType      @default(Deluxe)
  capacity     Int           @default(2)
  basePrice    BasePrice     @relation(fields: [suite, capacity], references: [suite, capacity])
  reservations Reservation[]
  valid        Boolean       @default(true)
}

enum RoomType {
  Deluxe
  Premium
  Luxury
  Elite
  VIP
}

model BasePrice {
  suite      RoomType
  capacity   Int
  base_price BigInt

  Room Room[]
  @@id([suite, capacity])
}

model Reservation {
  id           Int       @id @default(autoincrement())
  customer_id  String
  customer     Customer  @relation(fields: [customer_id], references: [id])
  room_id      Int
  room         Room      @relation(fields: [room_id], references: [id])
  check_in     DateTime  @default(now())
  check_out    DateTime?
  bookingPrice BigInt // @default(room.basePrice.base_price * days)
  price        Int       @default(0)
  valid        Boolean   @default(true)
}
